// #pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
// dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
// {	
// 	assembly("ForNav.Reports.6.3.0.2259")
// 	{
// 		type(ForNav.Report_6_3_0_2259; ForNavReport51516028_v6_3_0_2259){}   
// 	}
// } // Reports ForNAV Autogenerated code - do not delete or modify -->

// Report 50028 "Finance Cash Report_Ver1.0"
// {
// 	Caption = 'Finance Cash Report_Ver1.0';
// 	RDLCLayout = './Layouts/FinanceCashReport_Ver1.0.rdlc'; DefaultLayout = RDLC;

// 	dataset
// 	{
// 		dataitem("G/L Account";"G/L Account")
// 		{
// 			DataItemTableView = sorting("Form2F(Statement of C Income)") where("Capital adequecy"=filter(Yes));
// 			RequestFilterFields = "No.","Account Type","Date Filter","Global Dimension 1 Filter","Global Dimension 2 Filter";
// 			column(ReportForNavId_6710; 6710) {} // Autogenerated by ForNav - Do not delete
// 			column(FORMAT_TODAY_0_4_; Format(Today,0,4))
// 			{
// 			}
// 			column(STRSUBSTNO_Text000_PeriodText_; StrSubstNo(Text000,PeriodText))
// 			{
// 			}
// 			column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
// 			{
// 			}
// 			column(COMPANYNAME; COMPANYNAME)
// 			{
// 			}
// 			column(UserId; UserId)
// 			{
// 			}
// 			column(company_Picture; company.Picture)
// 			{
// 			}
// 			column(G_L_Account__TABLECAPTION__________GLFilter; "G/L Account".TableCaption + ': ' + GLFilter)
// 			{
// 			}
// 			column(EmptyString; '')
// 			{
// 			}
// 			column(Totaldebit; Totaldebit)
// 			{
// 			}
// 			column(Totalcredit; -Totalcredit)
// 			{
// 			}
// 			column(Trial_BalanceCaption; Trial_BalanceCaptionLbl)
// 			{
// 			}
// 			column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
// 			{
// 			}
// 			column(Net_ChangeCaption; Net_ChangeCaptionLbl)
// 			{
// 			}
// 			column(No_Caption; No_CaptionLbl)
// 			{
// 			}
// 			column(PADSTR_____G_L_Account__Indentation___3___G_L_Account__NameCaption; PADSTR_____G_L_Account__Indentation___3___G_L_Account__NameCaptionLbl)
// 			{
// 			}
// 			column(G_L_Account___Net_Change_Caption; G_L_Account___Net_Change_CaptionLbl)
// 			{
// 			}
// 			column(G_L_Account___Net_Change__Control22Caption; G_L_Account___Net_Change__Control22CaptionLbl)
// 			{
// 			}
// 			column(TotalsCaption; TotalsCaptionLbl)
// 			{
// 			}
// 			column(G_L_Account_No_; "G/L Account"."No.")
// 			{
// 			}
// 			column(OldNo_GLAccount; "G/L Account"."Old No.")
// 			{
// 			}
// 			column(NetChange_GLAccount; "G/L Account"."Net Change")
// 			{
// 			}
// 			column(Balance_GLAccount; "G/L Account".Balance)
// 			{
// 			}
// 			column(VarMonClosingBalance; VarMonClosingBalance)
// 			{
// 			}
// 			column(VarTueClosingBalance; VarTueClosingBalance)
// 			{
// 			}
// 			column(VarWedClosingBalance; VarWedClosingBalance)
// 			{
// 			}
// 			column(VarThurClosingBalance; VarThurClosingBalance)
// 			{
// 			}
// 			column(VarFriClosingBalance; VarFriClosingBalance)
// 			{
// 			}
// 			column(VarSaturClosingBalance; VarSaturClosingBalance)
// 			{
// 			}
// 			column(VarSundClosingBalance; VarSundClosingBalance)
// 			{
// 			}
// 			column(VarMonDateActual; Format(VarMonDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarTueDateActual; Format(VarTueDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarWedDateActual; Format(VarWedDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarThurDateActual; Format(VarThurDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarFriDateActual; Format(VarFriDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarSaturDateActual; Format(VarSaturDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarSundDateActual; Format(VarSundDateActual,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(VarReportStartDate; Format(VarReportStartDate,0,'<Day,2> <Month Text,3> <Year4>'))
// 			{
// 			}
// 			column(CashReportAccount_GLAccount; "G/L Account"."Capital adequecy")
// 			{
// 			}
// 			column(CashReportDeposits_GLAccount; "G/L Account"."Form2F1(Statement of C Income)")
// 			{
// 			}
// 			column(VarLoanAcountBalanceMon; VarLoanAcountBalanceMon)
// 			{
// 			}
// 			column(VarLoanAcountBalanceTue; VarLoanAcountBalanceTue)
// 			{
// 			}
// 			column(VarLoanAcountBalanceWed; VarLoanAcountBalanceWed)
// 			{
// 			}
// 			column(VarLoanAcountBalanceThur; VarLoanAcountBalanceThur)
// 			{
// 			}
// 			column(VarLoanAcountBalanceFri; VarLoanAcountBalanceFri)
// 			{
// 			}
// 			column(VarLoanAcountBalanceSatur; VarLoanAcountBalanceSatur)
// 			{
// 			}
// 			column(VarLoanAcountBalanceSund; VarLoanAcountBalanceSund)
// 			{
// 			}
// 			column(VarMonTotals; VarMonTotals)
// 			{
// 			}
// 			column(VarTueTotals; VarTueTotals)
// 			{
// 			}
// 			column(VarWedTotals; VarWedTotals)
// 			{
// 			}
// 			column(VarThurTotals; VarThurTotals)
// 			{
// 			}
// 			column(VarFriTotals; VarFriTotals)
// 			{
// 			}
// 			column(VarSaturTotals; VarSaturTotals)
// 			{
// 			}
// 			column(VarSundTotals; VarSundTotals)
// 			{
// 			}
// 			column(VarMonLiquidityRatio; VarMonLiquidityRatio)
// 			{
// 			}
// 			column(VarTueTotalsLiquidityRatio; VarTueTotalsLiquidityRatio)
// 			{
// 			}
// 			column(VarWedTotalsLiquidityRatio; VarWedTotalsLiquidityRatio)
// 			{
// 			}
// 			column(VarThurTotalsLiquidityRatio; VarThurTotalsLiquidityRatio)
// 			{
// 			}
// 			column(VarFriTotalsLiquidityRatio; VarFriTotalsLiquidityRatio)
// 			{
// 			}
// 			column(VarSaturTotalsLiquidityRatio; VarSaturTotalsLiquidityRatio)
// 			{
// 			}
// 			column(VarSundTotalsLiquidityRatio; VarSundTotalsLiquidityRatio)
// 			{
// 			}
// 			column(VarMonCashEarningBankTotals; VarMonCashEarningBankTotals)
// 			{
// 			}
// 			column(VarTueCashEarningBankTotals; VarTueCashEarningBankTotals)
// 			{
// 			}
// 			column(VarWedCashEarningBankTotals; VarWedCashEarningBankTotals)
// 			{
// 			}
// 			column(VarThurCashEarningBankTotals; VarThurCashEarningBankTotals)
// 			{
// 			}
// 			column(VarFriCashEarningBankTotals; VarFriCashEarningBankTotals)
// 			{
// 			}
// 			column(VarSaturCashEarningBankTotals; VarSaturCashEarningBankTotals)
// 			{
// 			}
// 			column(VarSundCashEarningBankTotals; VarSundCashEarningBankTotals)
// 			{
// 			}
// 			column(VarMonNonCashEarningTotals; VarMonNonCashEarningTotals)
// 			{
// 			}
// 			column(VarTueNonCashEarningTotals; VarTueNonCashEarningTotals)
// 			{
// 			}
// 			column(VarWedNonCashEarningTotals; VarWedNonCashEarningTotals)
// 			{
// 			}
// 			column(VarThurNonCashEarningTotals; VarThurNonCashEarningTotals)
// 			{
// 			}
// 			column(VarFriNonCashEarningTotals; VarFriNonCashEarningTotals)
// 			{
// 			}
// 			column(VarSaturNonCashEarningTotals; VarSaturNonCashEarningTotals)
// 			{
// 			}
// 			column(VarSundNonCashEarningTotals; VarSundNonCashEarningTotals)
// 			{
// 			}
// 			column(VarCashEarningBenchMark; VarCashEarningBenchMark)
// 			{
// 			}
// 			column(VarNonCashEarningBankBenchMark; VarNonCashEarningBankBenchMark)
// 			{
// 			}
// 			column(VarRegulatorLiquidityRatio; VarRegulatorLiquidityRatio)
// 			{
// 			}
// 			column(AccountCategory_GLAccount; "G/L Account"."Account Category")
// 			{
// 			}
// 			column(VarDepositsSumMon; VarDepositsSumMon)
// 			{
// 			}
// 			column(VarDepositsSumTue; VarDepositsSumTue)
// 			{
// 			}
// 			column(VarDepositsSumWed; VarDepositsSumWed)
// 			{
// 			}
// 			column(VarDepositsSumThu; VarDepositsSumThu)
// 			{
// 			}
// 			column(VarDepositsSumFri; VarDepositsSumFri)
// 			{
// 			}
// 			column(VarDepositsSumSat; VarDepositsSumSat)
// 			{
// 			}
// 			column(VarDepositsSumSun; VarDepositsSumSun)
// 			{
// 			}
// 			column(VarMonClosingBalanceT; VarMonClosingBalanceTotalingAccount)
// 			{
// 			}
// 			column(VarTueClosingBalanceT; VarTueClosingBalanceTotalingAccount)
// 			{
// 			}
// 			column(VarWedClosingBalanceT; VarWedClosingBalanceTotalingAccount)
// 			{
// 			}
// 			column(VarThuClosingBalanceT; VarThuClosingBalanceTotalingAccount)
// 			{
// 			}
// 			column(VarFriClosingBalanceT; VarFriClosingBalanceTotalingAccount)
// 			{
// 			}
// 			column(VarSatClosingBalanceT; VarSatClosingBalanceTotalingAccount)
// 			{
// 			}
// 			column(VarSunClosingBalanceT; VarSunClosingBalanceTotalingAccount)
// 			{
// 			}
// 			dataitem(Integer;Integer)
// 			{
// 				DataItemTableView = sorting(Number) where(Number=const(1));
// 				column(ReportForNavId_5444; 5444) {} // Autogenerated by ForNav - Do not delete
// 				column(G_L_Account___No__; "G/L Account"."No.")
// 				{
// 				}
// 				column(PADSTR_____G_L_Account__Indentation___3___G_L_Account__Name; "G/L Account".Name)
// 				{
// 				}
// 				column(G_L_Account___Net_Change_; "G/L Account"."Net Change")
// 				{
// 				}
// 				column(G_L_Account___Net_Change__Control22; -"G/L Account"."Net Change")
// 				{
// 					AutoFormatType = 1;
// 				}
// 				column(G_L_Account___No___Control25; "G/L Account"."No.")
// 				{
// 				}
// 				column(PADSTR_____G_L_Account__Indentation___3___G_L_Account__Name_Control26; PadStr('',"G/L Account".Indentation * 3)+"G/L Account".Name)
// 				{
// 				}
// 				column(G_L_Account___Net_Change__Control27; "G/L Account"."Net Change")
// 				{
// 				}
// 				column(G_L_Account___Net_Change__Control28; -"G/L Account"."Net Change")
// 				{
// 					AutoFormatType = 1;
// 				}
// 				column(Integer_Number; Integer.Number)
// 				{
// 				}
// 				column(AccountType_GLAccount; Format("G/L Account"."Account Type",0,2))
// 				{
// 				}
// 			}
// 			dataitem("G/L Entry";"G/L Entry")
// 			{
// 				DataItemLink = "G/L Account No."=field("No."),"Posting Date"=field("Date Filter");
// 				column(ReportForNavId_18; 18) {} // Autogenerated by ForNav - Do not delete
// 			}
// 			trigger OnPreDataItem();
// 			begin
// 				 company.Get();
// 				 company.CalcFields(company.Picture);
// 				//===============================================================================Top 10 Depositors
// 				//===============================================================Mon
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarMonDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumMon:=VarDepositsSumMon+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					  VarDepositsSumMon:=VarDepositsSumMon*-1;
// 					  //EXIT;
// 					end;
// 				//===============================================================Tue
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarTueDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumTue:=VarDepositsSumTue+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					  //EXIT;
// 					  VarDepositsSumTue:=VarDepositsSumTue*-1;
// 					end;
// 				//===============================================================Wed
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarWedDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumWed:=VarDepositsSumWed+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					 // EXIT;
// 					 VarDepositsSumWed:=VarDepositsSumWed*-1;
// 					end;
// 				//===============================================================Thur
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarThurDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumThu:=VarDepositsSumThu+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					  VarDepositsSumThu:=VarDepositsSumThu*-1;
// 					  //EXIT;
// 					end;
// 				//===============================================================Fri
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarFriDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumFri:=VarDepositsSumFri+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					  VarDepositsSumFri:=VarDepositsSumFri*-1;
// 					  //EXIT;
// 					end;
// 				//===============================================================Sat
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarSaturDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumSat:=VarDepositsSumSat+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					  //EXIT;
// 					  VarDepositsSumSat:=VarDepositsSumSat*-1;
// 					end;
// 				//===============================================================Sun
// 				VarRank:=0;
// 				ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 				ObjMemberAccounts.Reset;
// 				ObjMemberAccounts.SetRange(ObjMemberAccounts."Global Dimension 1 Code",'FOSA');
// 				ObjMemberAccounts.SetFilter(ObjMemberAccounts."Date Filter",VarSundDateFilter);
// 				ObjMemberAccounts.SetCurrentkey(ObjMemberAccounts."Deposits Contributed Ver1");
// 				if ObjMemberAccounts.Find('-') then
// 				  begin
// 					repeat
// 					  ObjMemberAccounts.CalcFields(ObjMemberAccounts."Deposits Contributed Ver1");
// 					  VarRank:=VarRank+1;
// 					  VarDepositsSumSun:=VarDepositsSumSun+ObjMemberAccounts."Deposits Contributed Ver1";
// 					  until (ObjMemberAccounts.Next=0) or (VarRank=10);
// 					  VarDepositsSumSun:=VarDepositsSumSun*-1;
// 					  //EXIT;
// 					end;
// 			end;

// 			trigger OnAfterGetRecord();
// 			begin
// 				//====================================================================GL Closing Balance
// 				SetFilter("Date Filter",VarMonDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				VarMonClosingBalance:="Form2E(investment)Land";
// 				if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				begin
// 				  ObjGLAccounts.Reset;
// 				  ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 				  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarMonDateFilter);
// 				  if ObjGLAccounts.FindSet then
// 				  begin
// 					  VarMonClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarMonClosingBalance:=VarMonClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 				  end;
// 				end;
// 				SetFilter("Date Filter",VarTueDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				if VarTueDate<=WorkDate then
// 				begin
// 				  VarTueClosingBalance:="Form2E(investment)Land";
// 				  if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				  begin
// 					ObjGLAccounts.Reset;
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarTueDateFilter);
// 					if ObjGLAccounts.FindSet then
// 					begin
// 					  VarTueClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarTueClosingBalance:=VarTueClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 					end
// 				  end;
// 				end;
// 				SetFilter("Date Filter",VarWedDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				if VarWedDate<=WorkDate then
// 				begin
// 				  VarWedClosingBalance:="Form2E(investment)Land";
// 				  if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				  begin
// 					ObjGLAccounts.Reset;
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarWedDateFilter);
// 					if ObjGLAccounts.FindSet then
// 					begin
// 					  VarWedClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarWedClosingBalance:=VarWedClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 					end
// 				  end;
// 				end;
// 				SetFilter("Date Filter",VarThurDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				if VarThurDate<=WorkDate then
// 				begin
// 				  VarThurClosingBalance:="Form2E(investment)Land";
// 				  if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				  begin
// 					ObjGLAccounts.Reset;
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarThurDateFilter);
// 					if ObjGLAccounts.FindSet then
// 					begin
// 					  VarThurClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarThurClosingBalance:=VarThurClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 					end
// 				  end;
// 				end;
// 				SetFilter("Date Filter",VarFriDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				if VarFriDate<=WorkDate then
// 				begin
// 				  VarFriClosingBalance:="Form2E(investment)Land";
// 				  if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				  begin
// 					ObjGLAccounts.Reset;
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarFriDateFilter);
// 					if ObjGLAccounts.FindSet then
// 					begin
// 					  VarFriClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarFriClosingBalance:=VarFriClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 					end
// 				  end;
// 				end;
// 				SetFilter("Date Filter",VarSaturDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				if VarSaturDate<=WorkDate then
// 				begin
// 				   VarSaturClosingBalance:="Form2E(investment)Land";
// 				   if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				   begin
// 					ObjGLAccounts.Reset;
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSaturDateFilter);
// 					if ObjGLAccounts.FindSet then
// 					begin
// 					  VarSaturClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarSaturClosingBalance:=VarSaturClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 					end
// 				  end;
// 				end;
// 				SetFilter("Date Filter",VarSundDateFilter);
// 				CalcFields("Form2E(investment)Land");
// 				if VarSundDate<=WorkDate then
// 				begin
// 				   VarSundClosingBalance:="Form2E(investment)Land";
// 				   if "G/L Account"."Account Type" = "G/L Account"."account type"::"End-Total" then
// 				  begin
// 					ObjGLAccounts.Reset;
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."No.",'>=%1&<=%2',CopyStr("G/L Account".Totaling,1,6),CopyStr("G/L Account".Totaling,9,15));
// 					ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSundDateFilter);
// 					if ObjGLAccounts.FindSet then
// 					begin
// 					  VarSundClosingBalance:=0;
// 					  repeat
// 						ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 						VarSundClosingBalance:=VarSundClosingBalance+ObjGLAccounts."Form2E(investment)Land";
// 					  until ObjGLAccounts.Next = 0;
// 					end
// 				  end;
// 				end;
// 				//====================================================================GL Closing Balance
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarMonDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceMon:=0;
// 					repeat
// 					if VarMonDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceMon:= VarLoanAcountBalanceMon+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarTueDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceTue:=0;
// 					repeat
// 					if VarTueDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceTue:= VarLoanAcountBalanceTue+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarWedDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceWed:=0;
// 					repeat
// 					if VarWedDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceWed:= VarLoanAcountBalanceWed+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarThurDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceThur:=0;
// 					repeat
// 					if VarThurDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceThur:= VarLoanAcountBalanceThur+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarFriDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceFri:=0;
// 					repeat
// 					if VarFriDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceFri:= VarLoanAcountBalanceFri+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSaturDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceSatur:=0;
// 					repeat
// 					if VarSaturDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceSatur:= VarLoanAcountBalanceSatur+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				ObjGLAccounts.Reset;
// 				ObjGLAccounts.SetRange(ObjGLAccounts.Liquidity,true);
// 				//ObjGLAccounts.SETFILTER(ObjGLAccounts."No.",'<>%1','102499');
// 				ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSundDateFilter);
// 				if ObjGLAccounts.FindSet then
// 				  begin
// 					VarLoanAcountBalanceSund:=0;
// 					repeat
// 					if VarSundDate<=WorkDate then
// 					ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 					VarLoanAcountBalanceSund:= VarLoanAcountBalanceSund+ObjGLAccounts."Form2E(investment)Land";
// 					until ObjGLAccounts.Next=0;
// 					end;
// 				FnRunDailyTotals;
// 				FnRunDailyCashEarningBankAccount;
// 				FnRunDailyNonCashEarning;
// 				ObjGeneralLedgerSetup.Get;
// 				VarNonCashEarningBankBenchMark:=ObjGeneralLedgerSetup."Non Earning Cash BenchMark";
// 				VarCashEarningBenchMark:=ObjGeneralLedgerSetup."Earning Bank Cash BenchMark";
// 				VarRegulatorLiquidityRatio:=ObjGeneralLedgerSetup."Regulator Miinimum Ratio";
// 				FnRunCashTotalingAccount;
// 			end;

// 			trigger OnPostDataItem();
// 			begin
// 				//MESSAGE(FORMAT(VarLoanAcountBalanceMon));
// 			end;

// 		}
// 	}

// 	requestpage
// 	{


// 		SaveValues = false;	  layout
// 		{
// 			area(content)
// 			{
// 				group(Options)
// 				{
// 					Caption = 'Options';
// 					field(VarReportStartDate;VarReportStartDate)
// 					{
// 						ApplicationArea = Basic;
// 						Caption = 'Start Date';
// 					}
// 					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
// 					{
// 						ApplicationArea = Basic;
// 						Caption = 'Design';
// 						Visible = ReportForNavAllowDesign;
// 						trigger OnValidate()
// 						begin
// 							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
// 							CurrReport.RequestOptionsPage.Close();
// 						end;

// 					}
// 				}
// 			}
// 		}

// 		actions
// 		{
// 		}
// 		trigger OnOpenPage()
// 		begin
// 			ReportForNavOpenDesigner := false;
// 		end;
// 	}

// 	trigger OnInitReport()
// 	begin
// 		;ReportsForNavInit;

// 	end;

// 	trigger OnPostReport()
// 	begin
// 		;ReportForNav.Post;
// 	end;

// 	trigger OnPreReport()
// 	begin
// 		//================================================Report Dates
// 		VarMonDate:=VarReportStartDate;
// 		VarTueDate:=CalcDate('1D',VarMonDate);
// 		VarWedDate:=CalcDate('1D',VarTueDate);
// 		VarThurDate:=CalcDate('1D',VarWedDate);
// 		VarFriDate:=CalcDate('1D',VarThurDate);
// 		VarSaturDate:=CalcDate('1D',VarFriDate);
// 		VarSundDate:=CalcDate('1D',VarSaturDate);
// 		//===============================================Actual Dates
// 		VarMonDateActual:=VarReportStartDate;
// 		VarTueDateActual:=CalcDate('1D',VarReportStartDate);
// 		VarWedDateActual:=CalcDate('2D',VarReportStartDate);
// 		VarThurDateActual:=CalcDate('3D',VarReportStartDate);
// 		VarFriDateActual:=CalcDate('4D',VarReportStartDate);
// 		VarSaturDateActual:=CalcDate('5D',VarReportStartDate);
// 		VarSundDateActual:=CalcDate('6D',VarReportStartDate);
// 		VarMonDateFilter:='..'+Format(VarMonDate);
// 		VarTueDateFilter:='..'+Format(VarTueDate);
// 		VarWedDateFilter:='..'+Format(VarWedDate);
// 		VarThurDateFilter:='..'+Format(VarThurDate);
// 		VarFriDateFilter:='..'+Format(VarFriDate);
// 		VarSaturDateFilter:='..'+Format(VarSaturDate);
// 		VarSundDateFilter:='..'+Format(VarSundDate);
// 		;ReportsForNavPre;
// 	end;
// 	var
// 		Text000: label 'Period: %1';
// 		GLFilter: Text[250];
// 		PeriodText: Text[30];
// 		Totaldebit: Decimal;
// 		Totalcredit: Decimal;
// 		Totaldebitbal: Decimal;
// 		Totalcreditbal: Decimal;
// 		company: Record "Company Information";
// 		Trial_BalanceCaptionLbl: label 'Cash Book Report';
// 		CurrReport_PAGENOCaptionLbl: label 'Page';
// 		Net_ChangeCaptionLbl: label 'Net Change';
// 		No_CaptionLbl: label 'No.';
// 		PADSTR_____G_L_Account__Indentation___3___G_L_Account__NameCaptionLbl: label 'Name';
// 		G_L_Account___Net_Change_CaptionLbl: label 'Debit';
// 		G_L_Account___Net_Change__Control22CaptionLbl: label 'Credit';
// 		TotalsCaptionLbl: label 'Totals';
// 		ExcelBuf: Record "Excel Buffer" temporary;
// 		PrintToExcel: Boolean;
// 		Text001: label 'Trial Balance';
// 		Text002: label 'Data';
// 		Text003: label 'Debit';
// 		Text004: label 'Credit';
// 		Text005: label 'Company Name';
// 		Text006: label 'Report No.';
// 		Text007: label 'Report Name';
// 		Text008: label 'User ID';
// 		Text009: label 'Date';
// 		Text010: label 'G/L Filter';
// 		Text011: label 'Period Filter';
// 		VarReportFilter: Text;
// 		VarMinDateDateFilter: Date;
// 		SFactory: Codeunit "SURESTEP Factory";
// 		ObjGeneralLedgerSetup: Record "General Ledger Setup";
// 		StartBalance: Decimal;
// 		GLAccBalance: Decimal;
// 		ObjGLEntry: Record "G/L Entry";
// 		VarMonDateFilter: Text;
// 		VarMonDate: Date;
// 		VarMonClosingBalance: Decimal;
// 		VarTueDateFilter: Text;
// 		VarTueDate: Date;
// 		VarTueClosingBalance: Decimal;
// 		VarWedDateFilter: Text;
// 		VarWedDate: Date;
// 		VarWedClosingBalance: Decimal;
// 		VarThurDateFilter: Text;
// 		VarThurDate: Date;
// 		VarThurClosingBalance: Decimal;
// 		VarFriDateFilter: Text;
// 		VarFriDate: Date;
// 		VarFriClosingBalance: Decimal;
// 		VarSaturDateFilter: Text;
// 		VarSaturDate: Date;
// 		VarSaturClosingBalance: Decimal;
// 		VarSundDateFilter: Text;
// 		VarSundDate: Date;
// 		VarSundClosingBalance: Decimal;
// 		VarReportStartDate: Date;
// 		VarMonDateActual: Date;
// 		VarTueDateActual: Date;
// 		VarWedDateActual: Date;
// 		VarThurDateActual: Date;
// 		VarFriDateActual: Date;
// 		VarSaturDateActual: Date;
// 		VarSundDateActual: Date;
// 		VarLoanAcountBalanceMon: Decimal;
// 		VarLoanAcountBalanceTue: Decimal;
// 		VarLoanAcountBalanceWed: Decimal;
// 		VarLoanAcountBalanceThur: Decimal;
// 		VarLoanAcountBalanceFri: Decimal;
// 		VarLoanAcountBalanceSatur: Decimal;
// 		VarLoanAcountBalanceSund: Decimal;
// 		ObjGLAccounts: Record "G/L Account";
// 		VarMonTotals: Decimal;
// 		VarTueTotals: Decimal;
// 		VarWedTotals: Decimal;
// 		VarThurTotals: Decimal;
// 		VarFriTotals: Decimal;
// 		VarSaturTotals: Decimal;
// 		VarSundTotals: Decimal;
// 		VarMonLiquidityRatio: Decimal;
// 		VarTueTotalsLiquidityRatio: Decimal;
// 		VarWedTotalsLiquidityRatio: Decimal;
// 		VarThurTotalsLiquidityRatio: Decimal;
// 		VarFriTotalsLiquidityRatio: Decimal;
// 		VarSaturTotalsLiquidityRatio: Decimal;
// 		VarSundTotalsLiquidityRatio: Decimal;
// 		VarMonCashEarningBankTotals: Decimal;
// 		VarTueCashEarningBankTotals: Decimal;
// 		VarWedCashEarningBankTotals: Decimal;
// 		VarThurCashEarningBankTotals: Decimal;
// 		VarFriCashEarningBankTotals: Decimal;
// 		VarSaturCashEarningBankTotals: Decimal;
// 		VarSundCashEarningBankTotals: Decimal;
// 		VarMonNonCashEarningTotals: Decimal;
// 		VarTueNonCashEarningTotals: Decimal;
// 		VarWedNonCashEarningTotals: Decimal;
// 		VarThurNonCashEarningTotals: Decimal;
// 		VarFriNonCashEarningTotals: Decimal;
// 		VarSaturNonCashEarningTotals: Decimal;
// 		VarSundNonCashEarningTotals: Decimal;
// 		VarCashEarningBenchMark: Decimal;
// 		VarNonCashEarningBankBenchMark: Decimal;
// 		VarRegulatorLiquidityRatio: Decimal;
// 		ObjMembers: Record "Members Register";
// 		VarRank: Integer;
// 		CustAmount: Record "Top Depositers" temporary;
// 		VarDateFilter: Text;
// 		ObjTopDepositors: Record "Top Depositers";
// 		ObjMemberAccounts: Record Vendor;
// 		VarDepositsSumMon: Decimal;
// 		VarDepositsSumTue: Decimal;
// 		VarDepositsSumWed: Decimal;
// 		VarDepositsSumThu: Decimal;
// 		VarDepositsSumFri: Decimal;
// 		VarDepositsSumSat: Decimal;
// 		VarDepositsSumSun: Decimal;
// 		VarMonClosingBalanceTotalingAccount: Decimal;
// 		VarTueClosingBalanceTotalingAccount: Decimal;
// 		VarWedClosingBalanceTotalingAccount: Decimal;
// 		VarThuClosingBalanceTotalingAccount: Decimal;
// 		VarFriClosingBalanceTotalingAccount: Decimal;
// 		VarSatClosingBalanceTotalingAccount: Decimal;
// 		VarSunClosingBalanceTotalingAccount: Decimal;

// 	procedure MakeExcelInfo()
// 	begin
// 		/*ExcelBuf.SetUseInfoSheet;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text005),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn(COMPANYNAME,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text007),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn(FORMAT(Text001),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text006),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn(REPORT::"Trial Balance",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Number);
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text008),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn(USERID,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text009),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn(TODAY,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Date);
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text010),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn("G/L Account".GETFILTER("No."),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddInfoColumn(FORMAT(Text011),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.AddInfoColumn("G/L Account".GETFILTER("Date Filter"),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
// 		ExcelBuf.ClearNewRow;
// 		MakeExcelDataHeader;
// 		*/

// 	end;

// 	local procedure MakeExcelDataHeader()
// 	begin
// 		ExcelBuf.AddColumn("G/L Account".FieldCaption("No."),false,'',true,false,true,'',ExcelBuf."cell type"::Text);
// 		ExcelBuf.AddColumn("G/L Account".FieldCaption(Name),false,'',true,false,true,'',ExcelBuf."cell type"::Text);
// 		ExcelBuf.AddColumn(
// 		  Format("G/L Account".FieldCaption("Net Change") + ' - ' + Text003),false,'',true,false,true,'',ExcelBuf."cell type"::Text);
// 		ExcelBuf.AddColumn(
// 		  Format("G/L Account".FieldCaption("Net Change") + ' - ' + Text004),false,'',true,false,true,'',ExcelBuf."cell type"::Text);
// 		ExcelBuf.AddColumn(
// 		  Format("G/L Account".FieldCaption("Balance at Date") + ' - ' + Text003),false,'',true,false,true,'',
// 		  ExcelBuf."cell type"::Text);
// 		ExcelBuf.AddColumn(
// 		  Format("G/L Account".FieldCaption("Balance at Date") + ' - ' + Text004),false,'',true,false,true,'',
// 		  ExcelBuf."cell type"::Text);
// 	end;

// 	procedure MakeExcelDataBody()
// 	var
// 		BlankFiller: Text[250];
// 	begin
// 		BlankFiller := PadStr(' ',MaxStrLen(BlankFiller),' ');
// 		ExcelBuf.NewRow;
// 		ExcelBuf.AddColumn(
// 		  "G/L Account"."No.",false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 		  ExcelBuf."cell type"::Text);
// 		if "G/L Account".Indentation = 0 then
// 		  ExcelBuf.AddColumn(
// 			"G/L Account".Name,false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 			ExcelBuf."cell type"::Text)
// 		else
// 		  ExcelBuf.AddColumn(
// 			CopyStr(BlankFiller,1,2 * "G/L Account".Indentation) + "G/L Account".Name,
// 			false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',ExcelBuf."cell type"::Text);
// 		case true of
// 		  "G/L Account"."Net Change" = 0:
// 			begin
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			end;
// 		  "G/L Account"."Net Change" > 0:
// 			begin
// 			  ExcelBuf.AddColumn(
// 				"G/L Account"."Net Change",false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,
// 				false,false,'#,##0.00',ExcelBuf."cell type"::Number);
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			end;
// 		  "G/L Account"."Net Change" < 0:
// 			begin
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			  ExcelBuf.AddColumn(
// 				-"G/L Account"."Net Change",false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,
// 				false,false,'#,##0.00',ExcelBuf."cell type"::Number);
// 			end;
// 		end;
// 		case true of
// 		  "G/L Account"."Balance at Date" = 0:
// 			begin
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			end;
// 		  "G/L Account"."Balance at Date" > 0:
// 			begin
// 			  ExcelBuf.AddColumn(
// 				"G/L Account"."Balance at Date",false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,
// 				false,false,'#,##0.00',ExcelBuf."cell type"::Number);
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			end;
// 		  "G/L Account"."Balance at Date" < 0:
// 			begin
// 			  ExcelBuf.AddColumn(
// 				'',false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,false,false,'',
// 				ExcelBuf."cell type"::Text);
// 			  ExcelBuf.AddColumn(
// 				-"G/L Account"."Balance at Date",false,'',"G/L Account"."Account Type" <> "G/L Account"."account type"::Posting,
// 				false,false,'#,##0.00',ExcelBuf."cell type"::Number);
// 			end;
// 		end;
// 	end;

// 	procedure CreateExcelbook()
// 	begin
// 		ExcelBuf.CreateBookAndOpenExcel(Text002,Text001,'Trial Balance',COMPANYNAME,UserId);
// 		Error('');
// 	end;

// 	local procedure SetFieldStyle()
// 	var
// 		FieldStyle: Text;
// 	begin
// 		FieldStyle := '';
// 		if "G/L Account"."Account Type"="G/L Account"."Account Type" then
// 		  FieldStyle := 'Strong';
// 	end;

// 	local procedure FnRunDailyTotals()
// 	begin
// 		//=================================================================================Daily Totals
// 		VarMonTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarMonDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarMonDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarMonTotals:=VarMonTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		//MESSAGE(FORMAT(VarMonTotals));
// 		VarTueTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarTueDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarTueDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarTueTotals:=VarTueTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarWedTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarWedDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarWedDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarWedTotals:=VarWedTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarThurTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarThurDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarThurDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarThurTotals:=VarThurTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarFriTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarFriDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarFriDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarFriTotals:=VarFriTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarSaturTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSaturDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarSaturDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarSaturTotals:=VarSaturTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarSundTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Capital adequecy",true);
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2F1(Statement of C Income)",false);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSundDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarSundDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarSundTotals:=VarSundTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		//===========================================================================End Of Daily Totals
// 		if (VarMonDate<=WorkDate) and (VarLoanAcountBalanceMon<>0) then
// 		  VarMonLiquidityRatio:=ROUND((VarMonTotals/(VarLoanAcountBalanceMon*-1))*100,0.05,'=');
// 		if (VarTueDate<=WorkDate ) and (VarLoanAcountBalanceTue<>0) then
// 		  VarTueTotalsLiquidityRatio:=ROUND((VarTueTotals/(VarLoanAcountBalanceTue*-1))*100,0.05,'=');
// 		if (VarWedDate<=WorkDate) and (VarLoanAcountBalanceWed<>0) then
// 		  VarWedTotalsLiquidityRatio:=ROUND((VarWedTotals/(VarLoanAcountBalanceWed*-1))*100,0.05,'=');
// 		if (VarThurDate<=WorkDate) and (VarLoanAcountBalanceThur<>0) then
// 		  VarThurTotalsLiquidityRatio:=ROUND((VarThurTotals/(VarLoanAcountBalanceThur*-1))*100,0.05,'=');
// 		if (VarFriDate<=WorkDate) and (VarLoanAcountBalanceFri<>0) then
// 		  VarFriTotalsLiquidityRatio:=ROUND((VarFriTotals/(VarLoanAcountBalanceFri*-1))*100,0.05,'=');
// 		if (VarSaturDate<=WorkDate) and  (VarLoanAcountBalanceSatur<>0) then
// 		  VarSaturTotalsLiquidityRatio:=ROUND((VarSaturTotals/(VarLoanAcountBalanceSatur*-1))*100,0.05,'=');
// 		if (VarSundDate<=WorkDate) and  (VarLoanAcountBalanceSund<>0) then
// 		  VarSundTotalsLiquidityRatio:=ROUND((VarSundTotals/(VarLoanAcountBalanceSund*-1))*100,0.05,'=');
// 	end;

// 	local procedure FnRunDailyNonCashEarning()
// 	begin
// 		//=================================================================================Daily Totals
// 		VarMonTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarMonDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarMonDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarMonNonCashEarningTotals:=VarMonNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarTueTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarTueDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarTueDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarTueNonCashEarningTotals:=VarTueNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarWedTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarWedDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarWedDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarWedNonCashEarningTotals:=VarWedNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarThurTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarThurDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarThurDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarThurNonCashEarningTotals:=VarThurNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarFriTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarFriDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarFriDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarFriNonCashEarningTotals:=VarFriNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarSaturTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSaturDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		begin
// 		  repeat
// 			if VarSaturDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarSaturNonCashEarningTotals:=VarSaturNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 		  until ObjGLAccounts.Next=0;
// 		end;
// 		VarSundTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSundDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		begin
// 		  repeat
// 			if VarSundDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarSundNonCashEarningTotals:=VarSundNonCashEarningTotals+ObjGLAccounts."Form2E(investment)Land";
// 		  until ObjGLAccounts.Next=0;
// 		end;
// 		//===========================================================================End Of Daily Totals
// 	end;

// 	local procedure FnRunDailyCashEarningBankAccount()
// 	begin
// 		//=================================================================================Daily Totals
// 		VarMonTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarMonDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarMonDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarMonCashEarningBankTotals:=VarMonCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarTueTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarTueDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarTueDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarTueCashEarningBankTotals:=VarTueCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarWedTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarWedDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarWedDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarWedCashEarningBankTotals:=VarWedCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarThurTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarThurDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarThurDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarThurCashEarningBankTotals:=VarThurCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarFriTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarFriDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarFriDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarFriCashEarningBankTotals:=VarFriCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarSaturTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSaturDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarSaturDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarSaturCashEarningBankTotals:=VarSaturCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		VarSundTotals:=0;
// 		ObjGLAccounts.Reset;
// 		ObjGLAccounts.SetRange(ObjGLAccounts."Form2E(investment)New",true);
// 		ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSundDateFilter);
// 		if ObjGLAccounts.FindSet then
// 		  begin
// 			repeat
// 			if VarSundDate<=WorkDate then
// 			ObjGLAccounts.CalcFields(ObjGLAccounts."Form2E(investment)Land");
// 			VarSundCashEarningBankTotals:=VarSundCashEarningBankTotals+ObjGLAccounts."Form2E(investment)Land";
// 			until ObjGLAccounts.Next=0;
// 			end;
// 		//===========================================================================End Of Daily Totals
// 	end;

// 	local procedure FnRunCashTotalingAccount()
// 	begin
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarMonDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarMonClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarMonClosingBalanceTotalingAccount:=VarMonClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 			  //MESSAGE(FORMAT(VarMonClosingBalanceTotalingAccount));
// 		  end;
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarTueDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarTueClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarTueClosingBalanceTotalingAccount:=VarTueClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 		  end;
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarWedDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarWedClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarWedClosingBalanceTotalingAccount:=VarWedClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 		  end;
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarThurDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarThuClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarThuClosingBalanceTotalingAccount:=VarThuClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 		  end;
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarFriDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarFriClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarFriClosingBalanceTotalingAccount:=VarFriClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 		  end;
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSaturDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarSatClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarSatClosingBalanceTotalingAccount:=VarSatClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 		  end;
// 		  ObjGLAccounts.Reset;
// 		  ObjGLAccounts.SetRange(ObjGLAccounts.StatementOfFP2,true);
// 		  ObjGLAccounts.SetFilter(ObjGLAccounts."Date Filter",VarSundDateFilter);
// 		  if ObjGLAccounts.FindSet then
// 		  begin
// 			  VarSunClosingBalanceTotalingAccount:=0;
// 			  repeat
// 				ObjGLAccounts.CalcFields(ObjGLAccounts.Balance);
// 				VarSunClosingBalanceTotalingAccount:=VarSunClosingBalanceTotalingAccount+ObjGLAccounts.Balance;
// 			  until ObjGLAccounts.Next = 0;
// 		  end;
// 	end;

// 	// --> Reports ForNAV Autogenerated code - do not delete or modify
// 	var 
// 		[WithEvents]
// 		ReportForNav : DotNet ForNavReport51516028_v6_3_0_2259;
// 		ReportForNavOpenDesigner : Boolean;
// 		[InDataSet]
// 		ReportForNavAllowDesign : Boolean;

// 	local procedure ReportsForNavInit();
// 	var
// 		ApplicationSystemConstants: Codeunit "Application System Constants";
// 		addInFileName : Text;
// 		tempAddInFileName : Text;
// 		path: DotNet Path;
// 		ReportForNavObject: Variant;
// 	begin
// 		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
// 		if not File.Exists(addInFileName) then begin
// 			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
// 			if not File.Exists(tempAddInFileName) then
// 				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
// 		end;
// 		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
// 		ReportForNav := ReportForNavObject;
// 		ReportForNav.Init();
// 	end;

// 	local procedure ReportsForNavPre();
// 	begin
// 		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
// 		if not ReportForNav.Pre() then CurrReport.Quit();
// 	end;

// 	// Reports ForNAV Autogenerated code - do not delete or modify -->
// }
